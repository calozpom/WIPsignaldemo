<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TaskRouter OmniChannel Contact Center</title>
  <link href='https://fonts.googleapis.com/css?family=Raleway:400,300,500' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="css/foundationz.css" />
  <link href="fonts/foundation-icons/foundation-icons.css" rel="stylesheet" type="text/css" />
  <link rel="stylesheet" type="text/css" href="css/normalize.css" />
  <!--<link rel="stylesheet" type="text/css" href="fonts/foundation-icons">-->
  <link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" />
  <link href="css/stylez.css" rel="stylesheet" />
  <script src="js/modernizr.custom.js"></script>
</head>
<body class="fadeIn animated">
  <div class="container">
    <div class="content-body">

      <div id="dashboard-body">
        <div class="row" id="addToThis"> 
        <a href='#' class='button success radius' onclick='vueMaster.$refs.testref.reset()'><i class='fi fi-check'></i>Reset Vue</a>
        <a href='#' class='button success radius' onclick='vueMaster.$refs.testref.addTask()'><i class='fi fi-check'></i>Add a task</a>
          <div id="vue-test">
            <vue-test ref="testref"></vue-test>
          </div>       
        </div>
      </div>
    </div>
  </div>

<template id="chatTask" >
<div>
  <div class='small-12 columns' v-for="task in taskList">
    <div class='custom-panel-heading'>
      <h5 class='white'>
        <div id='titleText'>
          Task: {{task.data.sid}}
        </div>
        <span class='label radius alert right'>Reject</span>&nbsp;
        <a href='#' @click="accept(task.data.sid, task.data.reservationSid)">
          <span class='label radius success right'>Accept</span>
        </a>
      </h5>
    </div>
    <div class='custom-panel-details'>
      <template v-for="message in task.data.messageList">
        <div class='row'>
          <div class='message-dashboard'>
            <div class='small-2 columns'>
              <div class='profilePic'>
                <img src='https://twiliozendeskcc.herokuapp.com/img/al.jpg' alt='profile' />
              </div>
            </div> 
            <div class='small-10 columns'>
            <div class='message-desc'>
                <div class='messageName'>
                  <b>{{message.from}}</b>
                </div>
                {{message.content}}
                <span class='right green'>now</span>
              </div>
            </div>
          </div>
        </div>
      </template>
      <form><input type='text' placeholder='Reply...'><a href='#' class='button success radius' @click="add"><i class='fi fi-check'></i>Send</a></form>
    </div>
  </div>
  </div>
</template>

  <script src="js/vendor/jquery.js"></script>
  <script src="js/foundation.min.js"></script>
  <script src="js/foundation/foundation.util.motion.js"></script>
  <script src="js/foundation/foundation.util.mediaQuery.js"></script>
  <script src="js/menucustom.js" type="text/javascript"></script>
  <script>        $(document).foundation(); </script>
  <script src="https://www.gstatic.com/firebasejs/3.9.0/firebase.js"></script>


  <script type="text/javascript" src="//media.twiliocdn.com/taskrouter/js/v1.6/taskrouter.min.js"></script>
  <script type="text/javascript" src="https://assets.zendesk.com/apps/sdk/2.0/zaf_sdk.js"></script>

  <script src="js/al-twilio-helper-funcs.js" type="text/javascript"></script>
  <script src="https://unpkg.com/vue"></script>
  <script src="https://unpkg.com/vuefire/dist/vuefire.js"></script>
  <script src="js/vueAgentComponents.js" type="text/javascript"></script>



  <script>
    function registerTaskRouterCallbacks() {
      worker.on('ready', function(worker) {
        console.log("Successfully registered as: " + worker.friendlyName);
        console.log("Current activity is: " + worker.activityName);
        console.log(worker.sid);             // 'WKxxx'
        console.log(worker.available);       // false
      });



      worker.on('activity.update', function(worker) {
      });

      worker.on("reservation.created", function(reservation) {
        console.log("new reservation")      
        zendeskClient.invoke('instances.create', {
          location: 'modal',
          url: 'https://twiliozendeskcc.herokuapp.com/reservationmodal?reservationSid='+reservation.sid+'&taskSid='+reservation.task.sid
        }).then(function(modalContext) {
          window.modalClient = zendeskClient.instance(modalContext['instances.create'][0].instanceGuid);
          modalClient.on('modal.close', function() {
          });
        });
      });


      worker.on("reservation.accepted", function(reservation) {
        modalClient.invoke('destroy');
      });

      worker.on("reservation.rejected", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " rejected!");
      });

      worker.on("reservation.timeout", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " timed out!");
      });

      worker.on("reservation.canceled", function(reservation) {
        console.log("Reservation " + reservation.task.sid + " canceled!");
      });    
    }

    window.onload = function() {
        // We use jQuery to make an Ajax request to the server to retrieve our 
        // Access Token
        $.getJSON('/token', function(data) {
          console.log(data.token);
          window.worker = new Twilio.TaskRouter.Worker(data.token);
          registerTaskRouterCallbacks();
          window.zendeskClient = ZAFClient.init();
          zendeskClient.invoke('resize', { width: '100%', height: '600px' });
        });
      }

var config = {
    apiKey: "AIzaSyDjqMYOFKIVU2z7RkkhxbY9DoLCv82sD1Y",
    authDomain: "taskrouter.firebaseapp.com",
    databaseURL: "https://taskrouter.firebaseio.com",
    projectId: "firebase-taskrouter",
    storageBucket: "firebase-taskrouter.appspot.com",
    messagingSenderId: "132789793599"
  };
  firebase.initializeApp(config);

window.myFirebase = firebase.database().ref();


Vue.component('vue-test', {
  template: '#chatTask',
  data: function() {
   return {
   taskList: []

  }

},
methods: {
  add: function() {
    this.taskList[0].messageList.push({from:'meya', content:'15'});
  },
  accept: function(sid, reservationSid) {
    console.log("calling accept method with sid " + sid + " and reservationSid " + reservationSid);
    acceptTask(sid, reservationSid);
  },
  removeTask: function() {
    this.taskList.pop();
  },
  update: function(newTaskList) {
    console.log("updating vue database");
    console.log("updating to " + newTaskList);
    this.taskList = newTaskList;
    console.log(JSON.stringify(this.taskList));
  },
  reset: function() {
    this.taskList = [];
    console.log("reset vue to zero");
    console.log(JSON.stringify(this.taskList));
  },
  addTask: function(){
    this.taskList=[{"WTad1d78700f4931ee276cde3177aa002b":{"attributes":"{\"message_from\":\"+14152791216\",\"message_body\":\"hi\",\"message_to\":\"+18559798881\",\"bot_qualified\":\"true\",\"message_sid\":\"SMc7c31c3eaada52dc452effa389fcf366\"}","channel":"chat","queue":"Other Customers","sid":"WTad1d78700f4931ee276cde3177aa002b","status":"reserved"}}]
    for (var key in this.taskList[0]) {
      this.taskList[0]["data"]=this.taskList[0][key];
      delete this.taskList[0][key];
    }
    console.log("adding a task");
    console.log(JSON.stringify(this.taskList));
  }

}
})


window.vueMaster = new Vue({
  el: '#vue-test'
  

})

//technically vuefire should do this but it doesn't seem to work reliably and is impossible to debug
myFirebase.child("taskList").child("WKc9fb44a68905d751dded01581d3fe50c").on('value', function(snapshot) {
  console.log('task List structure changed');
  console.log(JSON.stringify(snapshot.val()));
  var taskListData = snapshot.val();
  var dataToReturn = [];
  if (taskListData != null){
    for (var key in taskListData) {
      taskListData["data"]=taskListData[key];
      delete taskListData[key];
    }
    dataToReturn = [taskListData];
  }

  vueMaster.$refs.testref.update(dataToReturn);
});







</script>



</body>
</html>
